import streamlit as st 
import pandas as pd
import io
import base64
import mysql.connector
from sqlalchemy import create_engine
import matplotlib.pyplot as plt 
from dotenv import load_dotenv
from langchain_experimental.agents.agent_toolkits.pandas.base import create_pandas_dataframe_agent 
# agent cung c·∫•p ph∆∞∆°ng ph√°p gi·∫£i d·ªÉ ChatGPT m·ªü r·ªông kh·∫£ nƒÉng c·ªßa m√¨nh cho LLM 
from langchain_openai import ChatOpenAI
from src.logger.base import BaseLogger
from src.models.llms import load_llm
from src.utils import execute_plt_code
from src.components.chat_promt import chat_prompt
from Authentication import is_user_authenticated
#load enviroment
load_dotenv()
logger = BaseLogger()
MODEL_NAME = "gpt-3.5-turbo"
if not is_user_authenticated():
    st.warning("‚õî B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y.")
    st.stop()
def load_data_from_mysql():
    connection_string = "mysql+mysqlconnector://root:123456@127.0.0.1/clothing_company"
    engine = create_engine(connection_string)

    query = "SELECT * FROM clothing_company.hieuquachiendich_standalone"
    df = pd.read_sql(query, engine)

    return df

def process_query(da_agent, query):
    response = da_agent(query)

    intermediate_steps = response.get("intermediate_steps", [])

    if intermediate_steps and len(intermediate_steps[-1]) > 0:
        try:
            action = intermediate_steps[-1][0].tool_input["query"]
        except (KeyError, AttributeError):
            action = ""
    else:
        action = ""

    if "plt" in action:
        st.write(response["output"])

        fig = execute_plt_code(action, df=st.session_state.df)
        if fig:
            st.pyplot(fig)

        st.write("**Executed code:**")
        st.code(action)

        to_display_string = response["output"] + "\n" + f"```python\n{action}\n```"
        st.session_state.history.append((query, to_display_string))

    else:
        st.write(response["output"])
        st.session_state.history.append((query, response["output"]))

def display_chat_history():
    st.markdown("## L·ªãch s·ª≠ chat: ")
    for i, (q, r) in enumerate(st.session_state.history):
        st.markdown(f"**Query: {i+1}:** {q}")
        st.markdown(f"**Response: {i+1}:** {r}")
        st.markdown("---")


def main():
    #set up streamlit interface 
 
    st.set_page_config(
        page_title = "üìò Marketing",
        page_icon = "üìò",
        layout="centered"
       
    )
    def get_base64_image(file_path):
        with open(file_path, "rb") as f:
            data = f.read()
        return base64.b64encode(data).decode()
    
    image_base64 = get_base64_image("D:/DADuckShop/dagpt/templates/assets/img/Ducklogonotbackground.png")
    st.markdown(f"""
        <style>
        .background-container {{
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-image: url("data:image/png;base64,{image_base64}");
        background-size: cover;
        background-position: center;
        opacity: 0.1;  
        z-index: 0;   
        }}
        </style>
        <div class="background-container"></div>
    """, unsafe_allow_html=True)
    st.header("T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n ?")
    st.write("ƒê√¢y l√† ph·∫ßn m·ªÅm h·ªó tr·ª£ b·∫°n qu·∫£n tr·ªã doanh nghi·ªáp. V·ªõi trang n√†y, AI s·∫Ω h·ªó tr·ª£ b·∫°n c√°i nh√¨n t·ªïng quan v·ªÅ d·ªØ li·ªáu Marketing . ")
    #load llm model 
    llm = load_llm(model_name= MODEL_NAME)
    if "history" not in st.session_state:
        st.session_state.history = []
    #read csv file 
    if st.button("T·∫£i d·ªØ li·ªáu t·ª´ MySQL"):
        st.session_state.df = load_data_from_mysql()
        st.session_state.da_agent = create_pandas_dataframe_agent(
            llm=llm,
            df=st.session_state.df,
            agent_type="tool-calling",
            allow_dangerous_code=True,
            verbose=True,
            return_intermediate_steps=True,
        )
        st.session_state.data_loaded = True  # ƒê√°nh d·∫•u l√† ƒë√£ t·∫£i d·ªØ li·ªáu
        logger.info("### Successfully loaded MySQL data and agent! ###")

# N·∫øu d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i ‚Üí hi·ªÉn th·ªã d·ªØ li·ªáu v√† cho nh·∫≠p c√¢u h·ªèi
    if st.session_state.get("data_loaded", False):
        st.write("### D·ªØ li·ªáu Marketing", st.session_state.df.head())

        query = st.text_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:")

        if st.button("Run Query"):
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                process_query(st.session_state.da_agent, query)  
    #Display chat history
    st.divider()
    display_chat_history()

if __name__ == "__main__": 
    main()